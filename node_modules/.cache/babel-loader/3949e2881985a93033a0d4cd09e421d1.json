{"ast":null,"code":"import * as actionType from \"./types\";\nimport * as AuthService from \"../components/services/auth.service\"; // register action\n\nexport const registerAction = payload => dispatch => {\n  return AuthService.register(payload).then(response => {\n    dispatch({\n      type: actionType.REGISTER_SUCCESS,\n      payload: response.data\n    });\n    return Promise.resolve(response.data);\n  }).catch(error => {\n    dispatch({\n      type: actionType.REGISTER_FAIL,\n      payload: {\n        err: error.message || \"Registration Failed\"\n      }\n    });\n    return Promise.reject(error);\n  });\n}; // login action\n\nexport const loginAction = userCredential => dispatch => {\n  return AuthService.login(userCredential).then(data => {\n    dispatch({\n      type: actionType.LOGIN_SUCCESS,\n      payload: data\n    });\n    return Promise.resolve(data);\n  }).catch(error => {\n    dispatch({\n      type: actionType.REGISTER_FAIL,\n      payload: {\n        err: error.message || \"Registration Failed\"\n      }\n    });\n    return Promise.reject(error);\n  });\n};","map":{"version":3,"sources":["C:/Users/andre/Desktop/MERN-App/login_system/src/container/actions.js"],"names":["actionType","AuthService","registerAction","payload","dispatch","register","then","response","type","REGISTER_SUCCESS","data","Promise","resolve","catch","error","REGISTER_FAIL","err","message","reject","loginAction","userCredential","login","LOGIN_SUCCESS"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,SAA5B;AACA,OAAO,KAAKC,WAAZ,MAA6B,qCAA7B,C,CAEA;;AACA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAcC,QAAD,IAAc;AACvD,SAAOH,WAAW,CAACI,QAAZ,CAAqBF,OAArB,EACJG,IADI,CACEC,QAAD,IAAc;AAClBH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER,UAAU,CAACS,gBADV;AAEPN,MAAAA,OAAO,EAAEI,QAAQ,CAACG;AAFX,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACC,OAAR,CAAgBL,QAAQ,CAACG,IAAzB,CAAP;AACD,GARI,EASJG,KATI,CASGC,KAAD,IAAW;AAChBV,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER,UAAU,CAACe,aADV;AAEPZ,MAAAA,OAAO,EAAE;AAAEa,QAAAA,GAAG,EAAEF,KAAK,CAACG,OAAN,IAAiB;AAAxB;AAFF,KAAD,CAAR;AAKA,WAAON,OAAO,CAACO,MAAR,CAAeJ,KAAf,CAAP;AACD,GAhBI,CAAP;AAiBD,CAlBM,C,CAoBP;;AACA,OAAO,MAAMK,WAAW,GAAIC,cAAD,IAAqBhB,QAAD,IAAc;AAC3D,SAAOH,WAAW,CAACoB,KAAZ,CAAkBD,cAAlB,EACJd,IADI,CACEI,IAAD,IAAU;AACdN,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER,UAAU,CAACsB,aADV;AAEPnB,MAAAA,OAAO,EAAEO;AAFF,KAAD,CAAR;AAIA,WAAOC,OAAO,CAACC,OAAR,CAAgBF,IAAhB,CAAP;AACD,GAPI,EAQJG,KARI,CAQGC,KAAD,IAAW;AAChBV,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER,UAAU,CAACe,aADV;AAEPZ,MAAAA,OAAO,EAAE;AAAEa,QAAAA,GAAG,EAAEF,KAAK,CAACG,OAAN,IAAiB;AAAxB;AAFF,KAAD,CAAR;AAKA,WAAON,OAAO,CAACO,MAAR,CAAeJ,KAAf,CAAP;AACD,GAfI,CAAP;AAgBD,CAjBM","sourcesContent":["import * as actionType from \"./types\";\r\nimport * as AuthService from \"../components/services/auth.service\";\r\n\r\n// register action\r\nexport const registerAction = (payload) => (dispatch) => {\r\n  return AuthService.register(payload)\r\n    .then((response) => {\r\n      dispatch({\r\n        type: actionType.REGISTER_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n\r\n      return Promise.resolve(response.data);\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: actionType.REGISTER_FAIL,\r\n        payload: { err: error.message || \"Registration Failed\" },\r\n      });\r\n\r\n      return Promise.reject(error);\r\n    });\r\n};\r\n\r\n// login action\r\nexport const loginAction = (userCredential) => (dispatch) => {\r\n  return AuthService.login(userCredential)\r\n    .then((data) => {\r\n      dispatch({\r\n        type: actionType.LOGIN_SUCCESS,\r\n        payload: data,\r\n      });\r\n      return Promise.resolve(data);\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: actionType.REGISTER_FAIL,\r\n        payload: { err: error.message || \"Registration Failed\" },\r\n      });\r\n\r\n      return Promise.reject(error);\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}